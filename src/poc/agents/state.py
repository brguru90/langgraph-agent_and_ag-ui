from typing import TypedDict,List,Literal,get_args,NotRequired,Optional
from enum import Enum
from langchain_core.messages.base import BaseMessage
from langmem.short_term import RunningSummary
from langgraph.prebuilt.chat_agent_executor import AgentState


from pydantic import BaseModel, Field



class ResponseFromPreviousStep(BaseModel):
    """Represents the response from a previous step."""
    step_uid: str = Field(..., description="Unique identifier for the step")
    weight: float = Field(..., description="Weight of the response for importance, mention weight in <0-100> range")
    max_weight: Literal[100] = Field(100, description="Maximum weight value(provided the default value,LLM no need to set it)")

class StepModal(BaseModel):
    """Represents a single execution step with breakdown and tool calls."""
    step_uid: str = Field(..., description="Unique identifier for this step")
    agent_name: str = Field(..., description="Name of the agent executing this step")
    instruction: str = Field(..., description="What the agent needs to do in this step")
    sub_steps: List[str] = Field(..., description="Sub-steps to be executed within this step")
    available_tools: List[str] = Field(..., description="Available tools from the agent")
    response_from_previous_step: List[ResponseFromPreviousStep] = Field(..., description="optionally refer the previous responses by step_ids if its required along with their weights indicating importance and some of weight of all response_from_previous_step should be equal to 100")
    response: BaseMessage = Field(..., description="The response generated by the agent for this step")
    response_token_size: Optional[int] = Field(..., description="The token size of the response will be updated manually by the agent, LLM don't need to process it")
    weight_of_current_response: Optional[int] = Field(..., description="The weight of the current response will be updated manually by the agent, LLM don't need to process it")
    status: Literal["pending", "completed", "failed"]

class PlanOutputModal(BaseModel):
    """Schema for agent plan containing execution steps."""
    plan: List[StepModal] = Field(..., description="List of execution steps")

class CodeStructure(BaseModel):
    """Schema the software code."""
    code: str = Field(..., description="The code implementation")
    file_name: str = Field(..., description="The name of the file containing the code(if the information is not there then suggest a file name) Example: app.py, main.js, index.html, button_component.tsx, app.tsx, button_variant_disabled.vue")
    language: str = Field(..., description="The name of programming language of the code(if the information is not there then identify the programming language name) Example: javascript,typescript,python,c++.java,golang")
    framework: Optional[str] = Field(..., description="Optionally the name of framework used in the code(if the information is not there then identify the framework name) Example: Vue3,React JS,React TS, Angular, Flask, Springboot, QT")
    descriptions: Optional[List[str]] = Field(..., description="Optional descriptions of the code snippet")

class CodeSnippetsStructure(BaseModel):
    """Schema the software code."""
    code_snippets: List[CodeStructure] = Field(..., description="The list of code snippets with file names, programming language name, framework name and other relevant information")
    descriptions: Optional[List[str]] = Field(..., description="Optional overall descriptions of the code snippets")


class CompletedStep:
    step_uid: str
    instruction: str
    response: BaseMessage

class ChatState(AgentState):
    messages: List[BaseMessage]
    original_messages: NotRequired[List[BaseMessage]]
    tool_call_count: int
    thread_id: str 
    messages_history: List[BaseMessage]
    plan_executed: NotRequired[bool]
    plan: PlanOutputModal



class SupervisorNode:
    START_CONV = Literal["start_conv"]
    END_CONV = Literal["end_conv"]
    TOOLS = Literal["tools"]
    LLM = Literal["llm"]
    ROUTE = Literal["route"]
    SUPERVISOR = Literal["supervisor"]
    PLAN_EXECUTER = Literal["plan_executer"]
    CODING_AGENT = Literal["coding_agent"]
    RESEARCH_AGENT = Literal["research_agent"]
    STRUCTURED_OUTPUT_AGENT = Literal["structured_output_agent"]
    POST_AGENT_EXECUTION = Literal["post_agent_execution"]

    START_CONV_VAL = "start_conv"
    END_CONV_VAL = "end_conv"
    TOOLS_VAL = "tools"
    LLM_VAL = "llm"
    ROUTE_VAL = "route"
    SUPERVISOR_VAL = "supervisor"
    PLAN_EXECUTER_VAL = "plan_executer"
    CODING_AGENT_VAL = "coding_agent"
    RESEARCH_AGENT_VAL = "research_agent"
    STRUCTURED_OUTPUT_AGENT_VAL = "structured_output_agent"
    POST_AGENT_EXECUTION_VAL = "post_agent_execution"